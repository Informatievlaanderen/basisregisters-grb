name: Release

on:
  workflow_dispatch:

concurrency: Release

jobs:
  set-release-version:
    if: github.repository_owner == 'Informatievlaanderen'
    name: Decide next version
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.set-version.outputs.version }}

    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      with:
          persist-credentials: false

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'

    - name: Node version
      shell: bash
      run: node --version

    - name: Install NPM dependencies
      shell: bash
      run: npm ci

    - name: Run Semantic Release Dry-Run
      shell: bash
      run: npx semantic-release --dry-run
      env:
        GITHUB_TOKEN: ${{ secrets.VBR_GIT_RELEASE_TOKEN }}
        GIT_COMMIT: ${{ github.sha }}
        GIT_USERNAME: ${{ secrets.VBR_GIT_USER }}
        GIT_AUTHOR_NAME: ${{ secrets.VBR_GIT_USER }}
        GIT_COMMITTER_NAME: ${{ secrets.VBR_GIT_USER }}
        GIT_EMAIL: ${{ secrets.VBR_GIT_EMAIL }}
        GIT_AUTHOR_EMAIL: ${{ secrets.VBR_GIT_EMAIL }}
        GIT_COMMITTER_EMAIL: ${{ secrets.VBR_GIT_EMAIL }}

    - name: Set Release Version
      id: set-version
      run: |
        [ ! -f semver ] && echo none > semver
        echo $(cat semver)
        echo version=$(cat semver) >> $GITHUB_OUTPUT
      shell: bash

  build-api:
    name: Build GRB.Building.Api
    uses: Informatievlaanderen/build-pipeline/.github/workflows/build-image.yml@main
    needs: [ set-release-version ]
    if: ${{ (github.repository_owner == 'Informatievlaanderen') && (needs.set-release-version.outputs.version != 'none') }}
    with:
      registry: '${{ vars.VBR_DEVOPS_DOCKER_REGISTRY }}/building-registry'
      image-file: api-grb-image.tar
      image-name: api-grb
      build-project: Grb.Building.Api
      semver: ${{ needs.set-release-version.outputs.version }}
      dotnet-version: ${{ vars.VBR_DOTNET_VERSION_8 }}
    secrets: inherit

  build-job-processor:
    name: Build GRB.Building.Processor.Job
    uses: Informatievlaanderen/build-pipeline/.github/workflows/build-image.yml@main    
    needs: [ set-release-version ]
    if: ${{ (github.repository_owner == 'Informatievlaanderen') && (needs.set-release-version.outputs.version != 'none') }}
    with:
      registry: '${{ vars.VBR_DEVOPS_DOCKER_REGISTRY }}/building-registry'
      image-file: grb-processor-job-image.tar
      image-name: grb-processor-job
      test-project: Grb.Building.Tests
      build-project: Grb.Building.Processor.Job
      semver: ${{ needs.set-release-version.outputs.version }}
      dotnet-version: ${{ vars.VBR_DOTNET_VERSION_8 }}
    secrets: inherit

  build-upload-processor:
    name: Build GRB.Building.Processor.Upload
    uses: Informatievlaanderen/build-pipeline/.github/workflows/build-image.yml@main    
    needs: [ set-release-version ]
    if: ${{ (github.repository_owner == 'Informatievlaanderen') && (needs.set-release-version.outputs.version != 'none') }}
    with:
      registry: '${{ vars.VBR_DEVOPS_DOCKER_REGISTRY }}/building-registry'
      image-file: grb-processor-upload-image.tar
      image-name: grb-processor-upload
      test-project: Grb.Building.Tests
      build-project: Grb.Building.Processor.Upload
      semver: ${{ needs.set-release-version.outputs.version }}
      dotnet-version: ${{ vars.VBR_DOTNET_VERSION_8 }}
    secrets: inherit

  pack-abstractions:
    name: Pack Grb.Building.Api.Abstractions
    uses: Informatievlaanderen/build-pipeline/.github/workflows/pack.yml@main
    needs: [ set-release-version ]
    if: ${{ (github.repository_owner == 'Informatievlaanderen') && (needs.set-release-version.outputs.version != 'none') }}
    with:
      pack-file: Be.Vlaanderen.Basisregisters.Grb.Building.Api.Abstractions
      build-project: Grb.Building.Api.Abstractions
      semver: ${{ needs.set-release-version.outputs.version }}
      dotnet-version: ${{ vars.VBR_DOTNET_VERSION_8 }}
    secrets: inherit

  release:
    if: ${{ (github.repository_owner == 'Informatievlaanderen') && (needs.set-release-version.outputs.version != 'none') }}
    name: Semantic Release
    runs-on: ubuntu-latest
    needs: [ set-release-version, build-api, build-job-processor, build-upload-processor, pack-abstractions ]
    outputs:
      version: ${{ steps.set-version.outputs.version }}
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      with:
          persist-credentials: false

    - name: Cache NPM
      uses: actions/cache@v4
      env:
        cache-name: cache-npm
      with:
        path: ~/.npm
        key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-build-${{ env.cache-name }}-

    - name: Parse repository name
      run: echo REPOSITORY_NAME=$(echo "$GITHUB_REPOSITORY" | awk -F / '{print $2}' | sed -e "s/:refs//") >> $GITHUB_ENV
      shell: bash

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'

    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.x'

    - name: Node version
      shell: bash
      run: node --version

    - name: .NET version
      shell: bash
      run: dotnet --info

    - name: Python version
      shell: bash
      run: python --version

    - name: Install NPM dependencies
      shell: bash
      run: npm ci

    - name: Install Python dependencies
      shell: bash
      run: |
        python -m pip install --upgrade pip
        pip install requests markdown argparse

    - name: Download NuGet Grb.Building.Api.Abstractions
      uses: actions/download-artifact@v4
      continue-on-error: false
      with:
        name: nuget-Be.Vlaanderen.Basisregisters.Grb.Building.Api.Abstractions-${{ needs.set-release-version.outputs.version }}
        path: dist/nuget/

    - name: Run Semantic Release
      shell: bash
      run: npx semantic-release
      env:
        GITHUB_TOKEN: ${{ secrets.VBR_GIT_RELEASE_TOKEN }}
        GIT_COMMIT: ${{ github.sha }}
        GIT_USERNAME: ${{ secrets.VBR_GIT_USER }}
        GIT_AUTHOR_NAME: ${{ secrets.VBR_GIT_USER }}
        GIT_COMMITTER_NAME: ${{ secrets.VBR_GIT_USER }}
        GIT_EMAIL: ${{ secrets.VBR_GIT_EMAIL }}
        GIT_AUTHOR_EMAIL: ${{ secrets.VBR_GIT_EMAIL }}
        GIT_COMMITTER_EMAIL: ${{ secrets.VBR_GIT_EMAIL }}

    - name: Set Release Version
      id: set-version
      run: |
        [ ! -f semver ] && echo none > semver
        echo $(cat semver)
        echo ::set-output name=version::$(cat semver)
        echo RELEASE_VERSION=$(cat semver) >> $GITHUB_ENV
      shell: bash

  publish_to_nuget:
    needs: [ release ]
    if: ${{ (github.repository_owner == 'Informatievlaanderen') && (needs.release.outputs.version != 'none') }}
    name: Publish to NuGet
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Setup .NET Core
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ vars.VBR_DOTNET_VERSION_8 }}

    - name: .NET version
      shell: bash
      run: dotnet --info

    - name: Download NuGet Grb.Building.Api.Abstractions package
      uses: actions/download-artifact@v4
      with:
        name: nuget-Be.Vlaanderen.Basisregisters.Grb.Building.Api.Abstractions-${{ needs.release.outputs.version }}
        path: ~/

    - name: Publish packages to NuGet
      shell: bash
      run: |
        dotnet nuget push ~/Be.Vlaanderen.Basisregisters.Grb.Building.Api.Abstractions.$SEMVER.nupkg --source nuget.org --api-key $NUGET_API_KEY
      env:
        SEMVER: ${{  needs.release.outputs.version }}
        WORKSPACE: ${{ github.workspace }}
        NUGET_API_KEY: ${{ secrets.NUGET_API_KEY }}

  push_images:
    if: needs.release.outputs.version != 'none'
    needs: [ release ]
    name: Push images
    runs-on: ubuntu-latest
    steps:
      - name: Download GRB.Building.Api artifact
        uses: actions/download-artifact@v4
        continue-on-error: false
        with:
          name: api-grb-${{ needs.release.outputs.version }}
          path: ~/

      - name: Load GRB.Building.Api artifact
        shell: bash
        run: |
          echo $IMAGE-image.tar
          docker image load -i ~/$IMAGE-image.tar
        env:
          IMAGE: api-grb

      - name: Download GRB.Building.Processor.Job artifact
        uses: actions/download-artifact@v4
        continue-on-error: false
        with:
          name: grb-processor-job-${{ needs.release.outputs.version }}
          path: ~/

      - name: Load GRB.Building.Processor.Job artifact
        shell: bash
        run: |
          echo $IMAGE-image.tar
          docker image load -i ~/$IMAGE-image.tar
        env:
          IMAGE: grb-processor-job

      - name: Download GRB.Building.Processor.Upload artifact
        uses: actions/download-artifact@v4
        continue-on-error: false
        with:
          name: grb-processor-upload-${{ needs.release.outputs.version }}
          path: ~/

      - name: Load GRB.Building.Processor.Upload artifact
        shell: bash
        run: |
          echo $IMAGE-image.tar
          docker image load -i ~/$IMAGE-image.tar
        env:
          IMAGE: grb-processor-upload

      - name: Configure AWS credentials
        if: needs.release.outputs.version != 'none'
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.VBR_AWS_ACCESS_KEY_ID_DEVOPS }}
          aws-secret-access-key: ${{ secrets.VBR_AWS_SECRET_ACCESS_KEY_DEVOPS }}
          aws-region: ${{ secrets.VBR_AWS_REGION_PRD }}

      - name: Login to Amazon ECR
        if: needs.release.outputs.version != 'none'
        uses: aws-actions/amazon-ecr-login@v2

      - name: Push GRB.Building.Api to ECR
        if: needs.release.outputs.version != 'none'
        shell: bash
        run: |
          docker push $BUILD_DOCKER_REGISTRY/building-registry/api-grb:$SEMVER
        env:
          BUILD_DOCKER_REGISTRY_TST: ${{ secrets.VBR_DEVOPS_DOCKER_REGISTRY }}
          BUILD_DOCKER_REGISTRY: ${{ secrets.VBR_DEVOPS_DOCKER_REGISTRY }}
          SEMVER: ${{ needs.release.outputs.version }}
          WORKSPACE: ${{ github.workspace }}

      - name: Push GRB.Building.Processor.Job to ECR
        if: needs.release.outputs.version != 'none'
        shell: bash
        run: |
          docker push $BUILD_DOCKER_REGISTRY/building-registry/grb-processor-job:$SEMVER
        env:
          BUILD_DOCKER_REGISTRY_TST: ${{ secrets.VBR_DEVOPS_DOCKER_REGISTRY }}
          BUILD_DOCKER_REGISTRY: ${{ secrets.VBR_DEVOPS_DOCKER_REGISTRY }}
          SEMVER: ${{ needs.release.outputs.version }}
          WORKSPACE: ${{ github.workspace }}

      - name: Push GRB.Building.Processor.Upload to ECR
        if: needs.release.outputs.version != 'none'
        shell: bash
        run: |
          docker push $BUILD_DOCKER_REGISTRY/building-registry/grb-processor-upload:$SEMVER
        env:
          BUILD_DOCKER_REGISTRY_TST: ${{ secrets.VBR_DEVOPS_DOCKER_REGISTRY }}
          BUILD_DOCKER_REGISTRY: ${{ secrets.VBR_DEVOPS_DOCKER_REGISTRY }}
          SEMVER: ${{ needs.release.outputs.version }}
          WORKSPACE: ${{ github.workspace }}

      - name: Configure AWS credentials (Staging)
        if: needs.release.outputs.version != 'none'
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.VBR_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.VBR_AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.VBR_AWS_REGION }}

      - name: Login to Amazon ECR (Staging)
        if: needs.release.outputs.version != 'none'
        uses: aws-actions/amazon-ecr-login@v2

      - name: Push GRB.Building.Api to Staging
        if: needs.release.outputs.version != 'none'
        shell: bash
        run: |
          docker tag  $BUILD_DOCKER_REGISTRY_TST/building-registry/api-grb:$SEMVER $BUILD_DOCKER_REGISTRY/building-registry/api-grb:$SEMVER
          docker push $BUILD_DOCKER_REGISTRY/building-registry/api-grb:$SEMVER
        env:
          BUILD_DOCKER_REGISTRY_TST: ${{ secrets.VBR_DEVOPS_DOCKER_REGISTRY }}
          BUILD_DOCKER_REGISTRY: ${{ secrets.VBR_BUILD_DOCKER_REGISTRY }}
          SEMVER: ${{ needs.release.outputs.version }}
          WORKSPACE: ${{ github.workspace }}

      - name: Push GRB.Building.Processor.Job to Staging
        if: needs.release.outputs.version != 'none'
        shell: bash
        run: |
          docker tag  $BUILD_DOCKER_REGISTRY_TST/building-registry/grb-processor-job:$SEMVER $BUILD_DOCKER_REGISTRY/building-registry/grb-processor-job:$SEMVER
          docker push $BUILD_DOCKER_REGISTRY/building-registry/grb-processor-job:$SEMVER
        env:
          BUILD_DOCKER_REGISTRY_TST: ${{ secrets.VBR_DEVOPS_DOCKER_REGISTRY }}
          BUILD_DOCKER_REGISTRY: ${{ secrets.VBR_BUILD_DOCKER_REGISTRY }}
          SEMVER: ${{ needs.release.outputs.version }}
          WORKSPACE: ${{ github.workspace }}

      - name: Push GRB.Building.Processor.Upload to Staging
        if: needs.release.outputs.version != 'none'
        shell: bash
        run: |
          docker tag  $BUILD_DOCKER_REGISTRY_TST/building-registry/grb-processor-upload:$SEMVER $BUILD_DOCKER_REGISTRY/building-registry/grb-processor-upload:$SEMVER
          docker push $BUILD_DOCKER_REGISTRY/building-registry/grb-processor-upload:$SEMVER
        env:
          BUILD_DOCKER_REGISTRY_TST: ${{ secrets.VBR_DEVOPS_DOCKER_REGISTRY }}
          BUILD_DOCKER_REGISTRY: ${{ secrets.VBR_BUILD_DOCKER_REGISTRY }}
          SEMVER: ${{ needs.release.outputs.version }}
          WORKSPACE: ${{ github.workspace }}

      - name: Configure AWS credentials (New Production)
        if: needs.release.outputs.version != 'none'
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.VBR_AWS_ACCESS_KEY_ID_NEWPRD }}
          aws-secret-access-key: ${{ secrets.VBR_AWS_SECRET_ACCESS_KEY_NEWPRD }}
          aws-region: ${{ secrets.VBR_AWS_REGION_PRD }}

      - name: Login to Amazon ECR (New Production)
        if: needs.release.outputs.version != 'none'
        uses: aws-actions/amazon-ecr-login@v2

      - name: Push GRB.Building.Api to New Production
        if: needs.release.outputs.version != 'none'
        shell: bash
        run: |
          docker tag  $BUILD_DOCKER_REGISTRY_TST/building-registry/api-grb:$SEMVER $BUILD_DOCKER_REGISTRY_NEWPRD/building-registry/api-grb:$SEMVER
          docker push $BUILD_DOCKER_REGISTRY_NEWPRD/building-registry/api-grb:$SEMVER
        env:
          BUILD_DOCKER_REGISTRY_TST: ${{ secrets.VBR_DEVOPS_DOCKER_REGISTRY }}
          BUILD_DOCKER_REGISTRY_NEWPRD: ${{ secrets.VBR_BUILD_DOCKER_REGISTRY_NEWPRD }}
          SEMVER: ${{ needs.release.outputs.version }}
          WORKSPACE: ${{ github.workspace }}

      - name: Push GRB.Building.Processor.Job to New Production
        if: needs.release.outputs.version != 'none'
        shell: bash
        run: |
          docker tag  $BUILD_DOCKER_REGISTRY_TST/building-registry/grb-processor-job:$SEMVER $BUILD_DOCKER_REGISTRY_NEWPRD/building-registry/grb-processor-job:$SEMVER
          docker push $BUILD_DOCKER_REGISTRY_NEWPRD/building-registry/grb-processor-job:$SEMVER
        env:
          BUILD_DOCKER_REGISTRY_TST: ${{ secrets.VBR_DEVOPS_DOCKER_REGISTRY }}
          BUILD_DOCKER_REGISTRY_NEWPRD: ${{ secrets.VBR_BUILD_DOCKER_REGISTRY_NEWPRD }}
          SEMVER: ${{ needs.release.outputs.version }}
          WORKSPACE: ${{ github.workspace }}

      - name: Push GRB.Building.Processor.Upload to New Production
        if: needs.release.outputs.version != 'none'
        shell: bash
        run: |
          docker tag  $BUILD_DOCKER_REGISTRY_TST/building-registry/grb-processor-upload:$SEMVER $BUILD_DOCKER_REGISTRY_NEWPRD/building-registry/grb-processor-upload:$SEMVER
          docker push $BUILD_DOCKER_REGISTRY_NEWPRD/building-registry/grb-processor-upload:$SEMVER
        env:
          BUILD_DOCKER_REGISTRY_TST: ${{ secrets.VBR_DEVOPS_DOCKER_REGISTRY }}
          BUILD_DOCKER_REGISTRY_NEWPRD: ${{ secrets.VBR_BUILD_DOCKER_REGISTRY_NEWPRD }}
          SEMVER: ${{ needs.release.outputs.version }}
          WORKSPACE: ${{ github.workspace }}

  publish_to_atlassian:
    needs: [ release ]
    if: ${{ (github.repository_owner == 'Informatievlaanderen') && (needs.release.outputs.version != 'none') }}
    name: Publish to Atlassian
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Parse repository name
        run: echo REPOSITORY_NAME=$(echo "$GITHUB_REPOSITORY" | awk -F / '{print $2}' | sed -e "s/:refs//") >> $GITHUB_ENV
        shell: bash

      - name: Cache Paket
        uses: actions/cache@v4
        env:
          cache-name: cache-paket
        with:
          path: packages
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('paket.lock') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-

      - name: Cache Python
        uses: actions/cache@v4
        env:
          cache-name: cache-pip
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-build-${{ env.cache-name }}

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Install Python dependencies
        shell: bash
        run: |
          python -m pip install --upgrade pip
          pip install requests markdown argparse

      - name: Publish to Confluence
        shell: bash
        run: ./packages/Be.Vlaanderen.Basisregisters.Build.Pipeline/Content/ci-confluence.sh
        env:
          CONFLUENCE_TITLE: ${{ env.REPOSITORY_NAME }}
          CONFLUENCE_USERNAME: ${{ secrets.VBR_CONFLUENCE_USER }}
          CONFLUENCE_PASSWORD: ${{ secrets.VBR_CONFLUENCE_PASSWORD }}

  deploy_to_test_start_slack:
    if: github.repository_owner == 'Informatievlaanderen'
    needs: [ push_images ]
    name: Deploy to test started
    environment: test
    runs-on: ubuntu-latest

    steps:
    - name: Parse repository name
      run: echo REPOSITORY_NAME=$(echo ""$GITHUB_REPOSITORY"" | awk -F / '{print $2}' | sed -e ""s/:refs//"") >> $GITHUB_ENV
      shell: bash

    - name: Notify deployment started
      uses: slackapi/slack-github-action@v1.26.0
      with:
        channel-id: '#team-dinosaur-dev'
        slack-message: Deployment of basisregisters-grb to test has started
      env:
        SLACK_BOT_TOKEN: ${{ secrets.VBR_SLACK_BOT_TOKEN }}
        SLACK_CHANNEL: ${{ secrets.VBR_NOTIFIER_CHANNEL_NAME }}
        REPOSITORY_NAME: ${{ env.REPOSITORY_NAME }}

  deploy_services_to_test:
    if: github.repository_owner == 'Informatievlaanderen'
    needs: [ deploy_to_test_start_slack, release ]
    name: Deploy services to test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        services: [
          'building-grb-api'
        ]
    steps:
    - name: Deploy services
      env:
        BUILD_URL: ${{ vars.VBR_AWS_BUILD_API_DEVOPS }}/${{matrix.services}}
        STATUS_URL: ${{ vars.VBR_AWS_BUILD_STATUS_API_DEVOPS }}/${{matrix.services}}
      uses: informatievlaanderen/awscurl-polling-action/polling-action@main
      with:
          environment: tst
          version: ${{ needs.release.outputs.version }}
          status-url: $STATUS_URL
          deploy-url: $BUILD_URL
          access-key: ${{ secrets.VBR_AWS_ACCESS_KEY_ID_DEVOPS }}
          secret-key: ${{ secrets.VBR_AWS_SECRET_ACCESS_KEY_DEVOPS }}
          deploy-target: 'agb_ecs_service'
          interval: 2
          domain: 'basisregisters'
          project: 'basisregisters'

    - name: Deploy services output
      shell: bash
      run: |
        echo build-uuid: ${{ steps.awscurl-polling-action.outputs.build-uuid }}
        echo Status: ${{ steps.awscurl-polling-action.outputs.status }}
        echo ${{ steps.awscurl-polling-action.outputs.final-message }}
  deploy_tasks_to_test:
    if: github.repository_owner == 'Informatievlaanderen'
    needs: [ deploy_to_test_start_slack, release ]
    name: Deploy tasks to test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        services: [
          'building-grb-processor-upload',
          'building-grb-processor-job'
        ]
    steps:
    - name: Deploy services
      env:
        BUILD_URL: ${{ vars.VBR_AWS_BUILD_API_DEVOPS }}/${{matrix.services}}
        STATUS_URL: ${{ vars.VBR_AWS_BUILD_STATUS_API_DEVOPS }}/${{matrix.services}}
      uses: informatievlaanderen/awscurl-polling-action/polling-action@main
      with:
          environment: tst
          version: ${{ needs.release.outputs.version }}
          status-url: $STATUS_URL
          deploy-url: $BUILD_URL
          access-key: ${{ secrets.VBR_AWS_ACCESS_KEY_ID_DEVOPS }}
          secret-key: ${{ secrets.VBR_AWS_SECRET_ACCESS_KEY_DEVOPS }}
          deploy-target: 'ecs_scheduled_task'
          interval: 2
          domain: 'basisregisters'
          project: 'basisregisters'

    - name: Deploy services output
      shell: bash
      run: |
        echo build-uuid: ${{ steps.awscurl-polling-action.outputs.build-uuid }}
        echo Status: ${{ steps.awscurl-polling-action.outputs.status }}
        echo ${{ steps.awscurl-polling-action.outputs.final-message }}

  deploy_to_test_finish_slack:
    if: github.repository_owner == 'Informatievlaanderen'
    needs: [ deploy_services_to_test, deploy_tasks_to_test ]
    name: Deploy to test finished
    runs-on: ubuntu-latest

    steps:
    - name: Parse repository name
      run: echo REPOSITORY_NAME=$(echo ""$GITHUB_REPOSITORY"" | awk -F / '{print $2}' | sed -e ""s/:refs//"") >> $GITHUB_ENV
      shell: bash

    - name: Notify deployment finished
      uses: slackapi/slack-github-action@v1.26.0
      with:
        channel-id: '#team-dinosaur-dev'
        slack-message: Deployment of basisregisters-grb to test has finished
      env:
        SLACK_BOT_TOKEN: ${{ secrets.VBR_SLACK_BOT_TOKEN }}
        SLACK_CHANNEL: ${{ secrets.VBR_NOTIFIER_CHANNEL_NAME }}
        REPOSITORY_NAME: ${{ env.REPOSITORY_NAME }}

  deploy_to_staging_start_slack:
    if: github.repository_owner == 'Informatievlaanderen'
    needs: [ push_images, deploy_to_test_finish_slack ]
    name: Deploy to staging started
    environment: stg
    runs-on: ubuntu-latest

    steps:
    - name: Parse repository name
      run: echo REPOSITORY_NAME=$(echo ""$GITHUB_REPOSITORY"" | awk -F / '{print $2}' | sed -e ""s/:refs//"") >> $GITHUB_ENV
      shell: bash

    - name: Notify deployment started
      uses: slackapi/slack-github-action@v1.26.0
      with:
        channel-id: '#team-dinosaur-dev'
        slack-message: Deployment of basisregisters-grb to staging has started
      env:
        SLACK_BOT_TOKEN: ${{ secrets.VBR_SLACK_BOT_TOKEN }}
        SLACK_CHANNEL: ${{ secrets.VBR_NOTIFIER_CHANNEL_NAME }}
        REPOSITORY_NAME: ${{ env.REPOSITORY_NAME }}
  deploy_to_staging:
    if: github.repository_owner == 'Informatievlaanderen'
    needs: [ deploy_to_staging_start_slack, release ]
    name: Deploy to staging
    runs-on: ubuntu-latest
    strategy:
      matrix:
        services: [
            'building-registry-grb-api',
            'building-registry-grb-processor-upload',
            'building-registry-grb-processor-job'
          ]
    steps:
    - name: CD services
      env:
        BUILD_URL: ${{ secrets.VBR_AWS_BUILD_API }}/${{matrix.services}}
        STATUS_URL: ${{ secrets.VBR_AWS_BUILD_STATUS_API }}/${{matrix.services}}
      uses: informatievlaanderen/awscurl-polling-action/polling-action@main
      with:
          environment: stg
          version: ${{ needs.release.outputs.version }}
          status-url: $STATUS_URL
          deploy-url: $BUILD_URL
          access-key: ${{ secrets.VBR_AWS_BUILD_USER_ACCESS_KEY_ID }}
          secret-key: ${{ secrets.VBR_AWS_BUILD_USER_SECRET_ACCESS_KEY }}
          region: eu-west-1
          interval: 2

    - name: output CD services
      shell: bash
      run: |
        echo build-uuid: ${{ steps.awscurl-polling-action.outputs.build-uuid }}
        echo Status: ${{ steps.awscurl-polling-action.outputs.status }}
        echo ${{ steps.awscurl-polling-action.outputs.final-message }}

  deploy_to_staging_finish_slack:
    if: github.repository_owner == 'Informatievlaanderen'
    needs: [ deploy_to_staging ]
    name: Deploy to staging finished
    runs-on: ubuntu-latest

    steps:
    - name: Parse repository name
      run: echo REPOSITORY_NAME=$(echo ""$GITHUB_REPOSITORY"" | awk -F / '{print $2}' | sed -e ""s/:refs//"") >> $GITHUB_ENV
      shell: bash
    - name: Notify deployment finished
      uses: slackapi/slack-github-action@v1.26.0
      with:
        channel-id: '#team-dinosaur-dev'
        slack-message: Deployment of basisregisters-grb to staging has finished
      env:
        SLACK_BOT_TOKEN: ${{ secrets.VBR_SLACK_BOT_TOKEN }}
        SLACK_CHANNEL: ${{ secrets.VBR_NOTIFIER_CHANNEL_NAME }}
        REPOSITORY_NAME: ${{ env.REPOSITORY_NAME }}